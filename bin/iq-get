#!/usr/bin/env python

import argparse
import csv
import os
import logging
import sys
import tempfile
import qds_sdk
from qds_sdk.commands import Qubole, HiveCommand

try:
    input = raw_input
except NameError:
    pass

def write_intermediate_results(tmpFile, hc):
    hc.get_results(fp=tmpFile, delim='\t')

def main(args):
    Qubole.configure(api_token=args.Token)
    query_id = args.Query_ID
    # Default to CSV output format
    extension = 'csv'
    delimiter = ','
    # Try to infer file extension from delimiter
    if args.delimiter is not None:
        if args.delimiter == '\t':
            extension = 'tsv'
        else:
            extension = 'txt'
        delimiter = args.delimiter
    # Use output filename if given, else use query ID
    if args.output is not None:
        out_file_name = args.output
    else:
        out_file_name = 'full_result_%s.%s' % (str(query_id), extension,)
    try:
        hc = HiveCommand.find(query_id)
    except qds_sdk.exception.ResourceNotFound:
        sys.stderr.write("Invalid query ID.\n")
        sys.exit(-1)
    tmp_out_path = os.path.expanduser('~/Desktop/') + out_file_name + '.tmp'
    with tempfile.TemporaryFile() as tmpFile:
        write_intermediate_results(tmpFile, hc)
        tmpFile.seek(0)
        out_file_path = '%s%s' % (os.path.expanduser('~/Desktop/'), out_file_name,)
        # If the filename already exists, ask to overwrite it
        if os.path.exists(out_file_path):
            sys.stdout.write("File %s already exists.  Do you want to overwrite it? y/n\t" % out_file_path)
            choice = input().lower()
            if choice != 'y':
                filename, ext = os.path.splitext(out_file_path)
                out_file_path = filename + '(1).' + ext
                out_file_name = filename + '(1).' + ext
        # Write results with the specified delimiter to the specified file path
        with open(out_file_path, 'w') as out_file:
            if delimiter == '\t':
                writer = csv.writer(out_file, dialect='excel-tab',
                              quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
            else:
                writer = csv.writer(out_file, delimiter=delimiter, dialect='excel',
                              quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
            for line in tmpFile:
                sl = line.strip().split('\t')
                writer.writerow(sl)
    sys.stdout.write('Wrote file %s to desktop.\n' % out_file_name)
    sys.exit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('Token', type=str,
                        help='API token of the account from which this query ran')
    parser.add_argument('Query_ID', type=int,
                        help='The ID of the query whose results you wish to download')
    parser.add_argument('-o', '--output',
                        help='The name of the file you wish to write to')
    parser.add_argument('-d', '--delimiter', type=str,
                        help='Custom delimiter you would like to use')
    args = parser.parse_args()
    main(args)
